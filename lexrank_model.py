# -*- coding: utf-8 -*-
"""LexRank_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FBjYOEzmvsoRUXF_tYqz_9rPTFpcp_9K

## LexRank Model for summarization with saving file and rouge score comparison graph functionality
"""

# installing dependencies
!pip install pandas numpy networkx rouge-score scikit-learn nltk

import json
import pandas as pd
import numpy as np
import nltk
import networkx as nx
import matplotlib.pyplot as plt
from nltk.tokenize import sent_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from rouge_score import rouge_scorer

# Ensure necessary resources are downloaded
nltk.download('punkt')
nltk.download('punkt_tab')

def load_data(file_path):
    """Load the BillSum dataset from a JSONL file."""
    data = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            data.append(json.loads(line))
    return pd.DataFrame(data)

def compute_lexrank_summary(text, num_sentences=3):
    """Generate a summary using LexRank."""
    sentences = sent_tokenize(text)
    if len(sentences) <= num_sentences:
        return ' '.join(sentences)  # Return full text if too short

    # Compute TF-IDF similarity matrix
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(sentences)
    similarity_matrix = (tfidf_matrix * tfidf_matrix.T).toarray()

    # Build graph and apply PageRank (LexRank)
    graph = nx.from_numpy_array(similarity_matrix)
    scores = nx.pagerank(graph)
    ranked_sentences = sorted(((scores[i], s) for i, s in enumerate(sentences)), reverse=True)

    # Select top sentences
    summary = ' '.join([s for _, s in ranked_sentences[:num_sentences]])
    return summary

def compute_rouge_scores(reference_summary, generated_summary):
    """Compute ROUGE-1, ROUGE-2, and ROUGE-L scores."""
    scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)
    scores = scorer.score(reference_summary, generated_summary)
    return {
        "ROUGE-1": scores['rouge1'].fmeasure,
        "ROUGE-2": scores['rouge2'].fmeasure,
        "ROUGE-L": scores['rougeL'].fmeasure
    }

def save_results_to_jsonl(results, output_path):
    """Save the results to a JSONL file."""
    with open(output_path, 'w', encoding='utf-8') as f:
        for result in results:
            f.write(json.dumps(result) + '\n')

def plot_rouge_scores(results_df):
    """Plot separate graphs for ROUGE-1, ROUGE-2, and ROUGE-L scores."""
    metrics = {
        "ROUGE-1": "r",  # Red
        "ROUGE-2": "g",  # Green
        "ROUGE-L": "b"   # Blue
    }

    for metric, color in metrics.items():
        plt.figure(figsize=(10, 5))
        plt.plot(results_df.index, results_df[metric], label=metric, marker='o', color=color)
        plt.xlabel("Bill Index")
        plt.ylabel(f"{metric} Score")
        plt.title(f"{metric} Score Trend")
        plt.legend()
        plt.grid()
        plt.show()

def main(file_path, output_path, num_sentences=3):
    """Run the LexRank summarization model and evaluate using ROUGE."""
    df = load_data(file_path)
    results = []

    for _, row in df.iterrows():
        text, reference_summary = row['text'], row['summary']
        generated_summary = compute_lexrank_summary(text, num_sentences)
        rouge_scores = compute_rouge_scores(reference_summary, generated_summary)

        result = {
            "bill_id": row['bill_id'],
            "generated_summary": generated_summary,
            "ROUGE-1": rouge_scores['ROUGE-1'],
            "ROUGE-2": rouge_scores['ROUGE-2'],
            "ROUGE-L": rouge_scores['ROUGE-L']
        }
        results.append(result)

    results_df = pd.DataFrame(results)
    print(results_df.head())

    # Save results to JSONL
    save_results_to_jsonl(results, output_path)

    # Plot separate ROUGE score graphs
    plot_rouge_scores(results_df)

    return results_df

"""## Testing on US Train dataset - Billsum"""

# Run the script (replace 'billsum.jsonl' with the actual file path)
if __name__ == "__main__":
    file_path1 = "/content/us_train_data.jsonl"  # your dataset path
    output_path = "output_train.jsonl"  # Path to save generated summaries
    summary_results = main(file_path1, output_path)

"""## Testing on US Test dataset - Billsum"""

# Run the script (replace 'billsum.jsonl' with the actual file path)
if __name__ == "__main__":
    file_path2 = "/content/us_test_data.jsonl"  # your dataset path
    output_path = "output_test.jsonl"  # Path to save generated summaries
    summary_results = main(file_path2, output_path)

"""## Testing on CA Test dataset - Billsum"""

# Run the script (replace 'billsum.jsonl' with the actual file path)
if __name__ == "__main__":
    file_path3 = "/content/ca_test_data.jsonl"  # your dataset path
    output_path = "output_ca_test.jsonl"  # Path to save generated summaries
    summary_results = main(file_path3, output_path)

"""## Combined Graph for 100 bill indices per dataset"""

def plot_combined_rouge_scores(results1, results2, results3, dataset_labels):
    """Plot combined graphs for ROUGE-1, ROUGE-2, and ROUGE-L scores across datasets with 100 bill indices."""
    metrics = ["ROUGE-1", "ROUGE-2", "ROUGE-L"]
    colors = ["r", "g", "b"]  # Red (US Train), Green (US Test), Blue (CA Test)

    for metric in metrics:
        plt.figure(figsize=(12, 6))

        # Plot each dataset on the same graph with 100 bill indices
        plt.plot(range(1, 101), results1[metric][:100], color=colors[0], marker='o', label=dataset_labels[0])
        plt.plot(range(1, 101), results2[metric][:100], color=colors[1], marker='s', label=dataset_labels[1])
        plt.plot(range(1, 101), results3[metric][:100], color=colors[2], marker='^', label=dataset_labels[2])

        plt.xlabel("Bill Index (1-100)")
        plt.ylabel(f"{metric} Score")
        plt.title(f"Comparison of {metric} Across Datasets")
        plt.legend()
        plt.grid()
        plt.show()

# Example usage (Replace with actual dataframes)
import numpy as np

# Generating sample data for 100 bills
results_us_train = pd.DataFrame({
    "ROUGE-1": np.random.uniform(0.4, 0.6, 100),
    "ROUGE-2": np.random.uniform(0.2, 0.4, 100),
    "ROUGE-L": np.random.uniform(0.35, 0.55, 100)
})

results_us_test = pd.DataFrame({
    "ROUGE-1": np.random.uniform(0.4, 0.6, 100),
    "ROUGE-2": np.random.uniform(0.2, 0.4, 100),
    "ROUGE-L": np.random.uniform(0.35, 0.55, 100)
})

results_ca_test = pd.DataFrame({
    "ROUGE-1": np.random.uniform(0.4, 0.6, 100),
    "ROUGE-2": np.random.uniform(0.2, 0.4, 100),
    "ROUGE-L": np.random.uniform(0.35, 0.55, 100)
})

dataset_labels = ["US Train", "US Test", "CA Test"]

# Call function to plot graphs
plot_combined_rouge_scores(results_us_train, results_us_test, results_ca_test, dataset_labels)